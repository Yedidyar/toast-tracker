datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    roles         Role[]
    accounts      Account[]
    sessions      Session[]
    Toast         Toast[]
    Criminal      Criminal?
}

model Role {
    id     String       @id @default(cuid())
    type   RoleTypeEnum
    User   User?        @relation(fields: [userId], references: [id])
    userId String?

    @@index([userId])
}

enum RoleTypeEnum {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// toast models
model Toast {
    id           String   @id @default(cuid())
    userId       String
    occasionId   String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    occasion     Occasion @relation(fields: [occasionId], references: [id], onDelete: Cascade)
    dateToBeDone DateTime
    wasDone      Boolean  @default(false)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([userId])
    @@index([occasionId])
}

model Occasion {
    id    String  @id @default(cuid())
    name  String
    Toast Toast[]
}

model Criminal {
    id     String       @id @default(cuid())
    type   CriminalType
    userId String       @unique
    user   User         @relation(fields: [userId], references: [id])
}

enum CriminalType {
    REGULAR
    PERSONA_NON_GRATA
}
